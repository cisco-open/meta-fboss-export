# CMakeLists.txt

cmake_minimum_required(VERSION 3.11)

project(CISCO)

set(CMAKE_CXX_STANDARD 20)
set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_REENTRANT")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GNU_SOURCE")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-strong")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-write-strings")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wformat -Wformat-security")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=format-security")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
if("${CMAKE_CXX_COMPILER_ID}" MATCHES "^GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wmaybe-uninitialized")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -feliminate-unused-debug-types")
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "^Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wuninitialized")
endif()

include(FetchContent)

IF (DEFINED ENV{NLOHMANN_JSON_PATH})
    message(STATUS "Using nlohmann JSON library from $ENV{NLOHMANN_JSON_PATH}")
    include_directories($ENV{NLOHMANN_JSON_PATH}/include)
ELSE()
    message(STATUS "Downloading nlohmann JSON library from GitHub, please make sure that GitHub is reachable")
    FetchContent_Declare(json
        URL https://github.com/nlohmann/json/releases/download/v3.11.1/json.tar.xz)
    FetchContent_MakeAvailable(json)
ENDIF()

IF (DEFINED ENV{HOWARDHINNAN_DATE_PATH})
    message(STATUS "Using howardhinnan date library from $ENV{HOWARDHINNAN_DATE_PATH}")
    include_directories($ENV{HOWARDHINNAN_DATE_PATH}/include)
ELSE()
    message(STATUS "Downloading howardhinnan date library from GitHub, please make sure that GitHub is reachable")
    FetchContent_Declare(date
        URL https://github.com/HowardHinnant/date/archive/refs/tags/v3.0.1.tar.gz)
    FetchContent_MakeAvailable(date)
ENDIF()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
file(GLOB cmakeFiles ${CMAKE_CURRENT_SOURCE_DIR}/cmake/*.cmake)
foreach(cmakeFile ${cmakeFiles})
    get_filename_component(base_name ${cmakeFile} NAME)
    message(STATUS "Checking file ${base_name}")
    IF ("${cmakeFile}" MATCHES "data_corral_service_.*\.cmake")
        IF(DEFINED ENV{FBOSS_PATH})
            message(STATUS "FBOSS PATH is provided, including data_corral_sevice cmake")
            include(${cmakeFile})
        ELSE()
            message(STATUS "FBOSS PATH is NOT provided, excluding data_corral_sevice cmake")
        ENDIF()
    ELSE()
        message(STATUS "Including ${cmakeFile}")
        include(${cmakeFile})
    ENDIF()
endforeach(cmakeFile)
